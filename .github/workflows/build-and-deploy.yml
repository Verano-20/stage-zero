name: Build, Setup Infrastructure, and Deploy Containers

on:
  push:
    branches:
      - deployment
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  TF_VERSION: '1.13.3'
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

jobs:
  build-and-push-container:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'Dockerfile.*'
              - 'cmd/**'
              - 'internal/**'
              - 'go.mod'
              - 'go.sum'
              - '.dockerignore'
              - 'docs/**'

      - name: Set up Docker Buildx
        if: steps.changes.outputs.docker == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.changes.outputs.docker == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.changes.outputs.docker == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.changes.outputs.docker == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate deployment info
        if: steps.changes.outputs.docker == 'true'
        run: |
          echo "Docker image pushed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

      - name: Skip build notification
        if: steps.changes.outputs.docker != 'true'
        run: |
          echo "## Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No Docker-related files changed. Build skipped to save time and resources." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files checked:**" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "- Go source code (cmd/, internal/)" >> $GITHUB_STEP_SUMMARY
          echo "- Go modules (go.mod, go.sum)" >> $GITHUB_STEP_SUMMARY
          echo "- .dockerignore" >> $GITHUB_STEP_SUMMARY

  setup-infrastructure:
    name: Setup Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push-container
    if: always() && (needs.build-and-push-container.result == 'success' || needs.build-and-push-container.result == 'skipped')
    permissions:
      contents: read
    outputs:
      droplet_ip: ${{ steps.terraform-outputs.outputs.droplet_ip }}
      application_url: ${{ steps.terraform-outputs.outputs.application_url }}
      grafana_url: ${{ steps.terraform-outputs.outputs.grafana_url }}
      prometheus_url: ${{ steps.terraform-outputs.outputs.prometheus_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Initialize Terraform
        run: |
          cd terraform/deployment
          terraform init

      - name: Plan and Apply Infrastructure
        run: |
          cd terraform/deployment
         
          echo "Planning infrastructure changes..."
          
          # Plan output used due to a bug in Github Actions that causes the exit code to be 0 even when there are changes
          PLAN_OUTPUT=$(terraform plan -out=tfplan 2>&1)
          echo "$PLAN_OUTPUT"
          
          if echo "$PLAN_OUTPUT" | grep -q "No changes"; then
            echo "‚úÖ Infrastructure already exists - no changes needed"
          elif echo "$PLAN_OUTPUT" | grep -q "Plan:.*to add\|Plan:.*to change\|Plan:.*to destroy"; then
            echo "üîÑ Infrastructure changes detected - applying..."
            terraform apply -auto-approve tfplan
          else
            echo "‚ùå Terraform plan failed with exit code $PLAN_EXIT_CODE"
            exit 1
          fi

      - name: Get deployment outputs
        id: terraform-outputs
        run: |
          cd terraform/deployment
          echo "Getting Terraform outputs..."
          
          if ! terraform output droplet_ip > /dev/null 2>&1; then
            echo "‚ùå Error: droplet_ip output not found"
            echo "Available outputs:"
            terraform output
            exit 1
          fi
          
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "Droplet IP: $DROPLET_IP"
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT


  deploy-containers:
    name: Deploy Containers
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    permissions:
      contents: read

    steps:
      - name: Add SSH key to workflow runner
        run: |
          echo "Setting up SSH key for connecting to the droplet..."
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/digital_ocean
          chmod 600 ~/.ssh/digital_ocean

          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true
          
          echo "SSH key setup completed successfully"

      - name: Wait for droplet SSH connection
        run: |
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          echo "Waiting for droplet to be ready for SSH connections..."
          
          # Wait up to 5 minutes for SSH to be available
          for i in {1..30}; do
            echo "Attempt $i/30: Testing SSH connection..."
            if ssh -v -i ~/.ssh/digital_ocean -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@$DROPLET_IP "echo 'SSH connection successful'" 2>/dev/null; then
              echo "‚úÖ Droplet is ready for SSH connections"
              break
            else
              echo "SSH not ready yet, waiting 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout: Droplet not ready after 5 minutes"
              exit 1
            fi
          done

      - name: Wait for user-data script completion
        run: |
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          echo "Waiting for user-data script to complete..."
          
          # Wait up to 5 minutes for user-data script to complete
          for i in {1..30}; do
            echo "Attempt $i/30: Checking user-data script completion..."
            
            # Check if the completion marker file exists (most reliable)
            if ssh -v -i ~/.ssh/digital_ocean -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@$DROPLET_IP "test -f /var/log/user-data-complete" 2>/dev/null; then
              echo "‚úÖ User-data script completed successfully"
              break
            fi
            
            # Fallback: Check if Docker is installed and the application directory exists
            if ssh -i ~/.ssh/digital_ocean -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 root@$DROPLET_IP "command -v docker >/dev/null 2>&1 && test -d /opt/stage-zero && test -f /opt/stage-zero/deploy-containers.sh" 2>/dev/null; then
              echo "‚úÖ Docker installed and application directory ready"
              break
            fi
            
            echo "User-data script still running, waiting 10 seconds..."
            sleep 10
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout: User-data script not completed after 5 minutes"
              echo "Checking user-data script status..."
              ssh -v -i ~/.ssh/digital_ocean -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$DROPLET_IP "tail -20 /var/log/user-data.log || echo 'No user-data log found'"
              exit 1
            fi
          done

      - name: Deploy Containers
        id: deploy-app
        run: |
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          echo "Deploying containers on droplet: $DROPLET_IP"
          
          # Execute the container deployment script with retry logic
          echo "Executing container deployment script..."
          for attempt in {1..3}; do
            echo "Deployment attempt $attempt/3..."
            if DEPLOYMENT_OUTPUT=$(ssh -v -i ~/.ssh/digital_ocean -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 root@$DROPLET_IP "cd /opt/stage-zero && GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' ./deploy-containers.sh" 2>&1); then
              echo "‚úÖ Container deployment completed successfully"
              break
            else
              echo "‚ùå Deployment attempt $attempt failed:"
              echo "$DEPLOYMENT_OUTPUT"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All deployment attempts failed"
                exit 1
              else
                echo "Retrying in 30 seconds..."
                sleep 30
              fi
            fi
          done
          
          # Extract deployment type from output
          DEPLOYMENT_TYPE=$(echo "$DEPLOYMENT_OUTPUT" | grep "DEPLOYMENT_TYPE=" | cut -d'=' -f2)
          echo "Deployment type: $DEPLOYMENT_TYPE"
          echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          APPLICATION_URL="${{ needs.setup-infrastructure.outputs.application_url }}"
          GRAFANA_URL="${{ needs.setup-infrastructure.outputs.grafana_url }}"
          PROMETHEUS_URL="${{ needs.setup-infrastructure.outputs.prometheus_url }}"
          
          echo "Running final health checks..."
          echo "Checking application..."
          curl -f $APPLICATION_URL/health && echo "‚úÖ Application healthy"
          echo "Checking Grafana..."
          curl -f $GRAFANA_URL/api/health && echo "‚úÖ Grafana healthy"
          echo "Checking Prometheus..."
          curl -f $PROMETHEUS_URL/-/healthy && echo "‚úÖ Prometheus healthy"
          
          echo "üéâ Deployment completed successfully!"

      - name: Generate deployment summary
        run: |
          DROPLET_IP="${{ needs.setup-infrastructure.outputs.droplet_ip }}"
          APPLICATION_URL="${{ needs.setup-infrastructure.outputs.application_url }}"
          GRAFANA_URL="${{ needs.setup-infrastructure.outputs.grafana_url }}"
          PROMETHEUS_URL="${{ needs.setup-infrastructure.outputs.prometheus_url }}"
          DEPLOYMENT_TYPE="${{ steps.deploy-app.outputs.deployment_type }}"
          
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Type**: $DEPLOYMENT_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deployment\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: [$APPLICATION_URL]($APPLICATION_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana Dashboard**: [$GRAFANA_URL]($GRAFANA_URL) (admin/admin)" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: [$PROMETHEUS_URL]($PROMETHEUS_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Type**: $DEPLOYMENT_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks**: All services healthy" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: Updated via Terraform" >> $GITHUB_STEP_SUMMARY
          echo "- **Containers**: Updated via Docker Compose" >> $GITHUB_STEP_SUMMARY