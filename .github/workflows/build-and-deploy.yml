name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - deployment
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TF_VERSION: '1.13.3'
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'Dockerfile.*'
              - 'cmd/**'
              - 'internal/**'
              - 'go.mod'
              - 'go.sum'
              - '.dockerignore'

      - name: Set up Docker Buildx
        if: steps.changes.outputs.docker == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.changes.outputs.docker == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.changes.outputs.docker == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        if: steps.changes.outputs.docker == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate deployment info
        if: steps.changes.outputs.docker == 'true'
        run: |
          echo "Docker image pushed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

      - name: Skip build notification
        if: steps.changes.outputs.docker != 'true'
        run: |
          echo "## Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No Docker-related files changed. Build skipped to save time and resources." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files checked:**" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "- Go source code (cmd/, internal/)" >> $GITHUB_STEP_SUMMARY
          echo "- Go modules (go.mod, go.sum)" >> $GITHUB_STEP_SUMMARY
          echo "- .dockerignore" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Deploy Infrastructure
        run: |
          cd terraform/deployment
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Get deployment outputs
        id: terraform-outputs
        run: |
          cd terraform/deployment
          echo "droplet_ip=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT

      - name: Wait for infrastructure to be ready
        run: |
          echo "⏳ Waiting for infrastructure to be ready..."
          timeout=300  # 5 minutes
          counter=0
          
          while [ $counter -lt $timeout ]; do
            if curl -f ${{ steps.terraform-outputs.outputs.application_url }}/health > /dev/null 2>&1; then
              echo "✅ Infrastructure is ready!"
              break
            fi
            echo "Waiting for infrastructure... ($counter/$timeout)"
            sleep 10
            counter=$((counter + 10))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "❌ Infrastructure failed to start within ${timeout} seconds"
            exit 1
          fi

      - name: Update Application
        run: |
          DROPLET_IP="${{ steps.terraform-outputs.outputs.droplet_ip }}"
          
          echo "🚀 Updating application on droplet: $DROPLET_IP"
          
          # Execute the update script on the droplet
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$DROPLET_IP "cd /opt/stage-zero && GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' ./update-application.sh"
          
          echo "✅ Application update completed successfully"

      - name: Health Check
        run: |
          DROPLET_IP="${{ steps.terraform-outputs.outputs.droplet_ip }}"
          APPLICATION_URL="http://$DROPLET_IP:8080"
          GRAFANA_URL="http://$DROPLET_IP:3000"
          PROMETHEUS_URL="http://$DROPLET_IP:9090"
          
          echo "🔍 Running final health checks..."
          echo "Checking application..."
          curl -f $APPLICATION_URL/health && echo "✅ Application healthy"
          echo "Checking Grafana..."
          curl -f $GRAFANA_URL/api/health && echo "✅ Grafana healthy"
          echo "Checking Prometheus..."
          curl -f $PROMETHEUS_URL/-/healthy && echo "✅ Prometheus healthy"
          
          echo "🎉 Deployment completed successfully!"

      - name: Generate deployment summary
        run: |
          DROPLET_IP="${{ steps.terraform-outputs.outputs.droplet_ip }}"
          
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deployment\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: [http://$DROPLET_IP:8080](http://$DROPLET_IP:8080)" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana Dashboard**: [http://$DROPLET_IP:3000](http://$DROPLET_IP:3000) (admin/admin)" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: [http://$DROPLET_IP:9090](http://$DROPLET_IP:9090)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks**: All services healthy" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: Updated via Terraform" >> $GITHUB_STEP_SUMMARY
          echo "- **Containers**: Updated via Docker Compose" >> $GITHUB_STEP_SUMMARY