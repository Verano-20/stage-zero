name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - deployment
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TF_VERSION: '1.13.3'
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'Dockerfile.*'
              - 'cmd/**'
              - 'internal/**'
              - 'go.mod'
              - 'go.sum'
              - '.dockerignore'

      - name: Set up Docker Buildx
        if: steps.changes.outputs.docker == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.changes.outputs.docker == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.changes.outputs.docker == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.changes.outputs.docker == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate deployment info
        if: steps.changes.outputs.docker == 'true'
        run: |
          echo "Docker image pushed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

      - name: Skip build notification
        if: steps.changes.outputs.docker != 'true'
        run: |
          echo "## Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No Docker-related files changed. Build skipped to save time and resources." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files checked:**" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "- Go source code (cmd/, internal/)" >> $GITHUB_STEP_SUMMARY
          echo "- Go modules (go.mod, go.sum)" >> $GITHUB_STEP_SUMMARY
          echo "- .dockerignore" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform/deployment
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/deployment
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform/deployment
          terraform apply -auto-approve tfplan

      - name: Get deployment outputs
        id: terraform-outputs
        run: |
          cd terraform/deployment
          echo "droplet_ip=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT
          echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT
          echo "grafana_url=$(terraform output -raw grafana_url)" >> $GITHUB_OUTPUT
          echo "prometheus_url=$(terraform output -raw prometheus_url)" >> $GITHUB_OUTPUT

      - name: Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for application to be ready..."
          timeout=300  # 5 minutes
          counter=0
          
          while [ $counter -lt $timeout ]; do
            if curl -f ${{ steps.terraform-outputs.outputs.application_url }}/health > /dev/null 2>&1; then
              echo "✅ Application is ready!"
              break
            fi
            echo "Waiting for application... ($counter/$timeout)"
            sleep 10
            counter=$((counter + 10))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "❌ Application failed to start within ${timeout} seconds"
            exit 1
          fi

      - name: Run health checks
        run: |
          echo "Running health checks..."
          echo "Checking application..."
          curl -s -f -o /dev/null ${{ steps.terraform-outputs.outputs.application_url }}/health && echo "✅ Application healthy"
          echo "Checking Grafana..."
          curl -s -f -o /dev/null ${{ steps.terraform-outputs.outputs.grafana_url }}/api/health && echo "✅ Grafana healthy"
          echo "Checking Prometheus..."
          curl -s -f -o /dev/null ${{ steps.terraform-outputs.outputs.prometheus_url }}/-/healthy && echo "✅ Prometheus healthy"
          echo "✅ All health checks passed!"

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deployment\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: [${{ steps.terraform-outputs.outputs.application_url }}](${{ steps.terraform-outputs.outputs.application_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana Dashboard**: [${{ steps.terraform-outputs.outputs.grafana_url }}](${{ steps.terraform-outputs.outputs.grafana_url }}) (admin/admin)" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: [${{ steps.terraform-outputs.outputs.prometheus_url }}](${{ steps.terraform-outputs.outputs.prometheus_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Infrastructure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Droplet Name**: \`${{ steps.terraform-outputs.outputs.droplet_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Droplet IP**: \`${{ steps.terraform-outputs.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: \`${{ steps.terraform-outputs.outputs.droplet_region }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: \`${{ steps.terraform-outputs.outputs.droplet_size }}\`" >> $GITHUB_STEP_SUMMARY
