name: Run Tests For Release

on:
  pull_request:
    branches:
      - main
      - deployment

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '24'

jobs:
  # Job 1: Build Go application and run Go tests
  go-build-and-test:
    name: Build Go App & Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build application
        run: |
          go build -v -o bin/api-server ./cmd/api-server
          go build -v -o bin/migrate ./cmd/migrate

      - name: Run Go tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Generate test coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-report
          path: |
            coverage.out
            coverage.html

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: |
            bin/api-server
            bin/migrate

  # Job 2: Run Playwright E2E tests
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: go-build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start test environment with Docker Compose
        run: |
          echo "🚀 Starting test environment..."
          docker-compose -f docker-compose.test.yml up -d --build
          
          echo "⏳ Waiting for services to be ready..."
          timeout=120
          counter=0
          
          while [ $counter -lt $timeout ]; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ API is ready!"
              break
            fi
            echo "Waiting for API... ($counter/$timeout)"
            sleep 2
            counter=$((counter + 2))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "❌ API failed to start within ${timeout} seconds"
            echo "📋 Container logs:"
            docker-compose -f docker-compose.test.yml logs app-test
            exit 1
          fi

      - name: Run Playwright E2E tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:8080

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/

      - name: Upload Playwright traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces
          path: test-results/

      - name: Cleanup test environment
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker-compose -f docker-compose.test.yml down -v --remove-orphans

  # Job 3: Integration test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [go-build-and-test, e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.go-build-and-test.result }}" == "success" ]; then
            echo "✅ **Go Build & Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Go Build & Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ **E2E Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Go coverage report" >> $GITHUB_STEP_SUMMARY
          echo "- Go build binaries" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright test report" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright traces (on failure)" >> $GITHUB_STEP_SUMMARY

