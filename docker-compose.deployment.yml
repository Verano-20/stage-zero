services:
  migrate:
    image: ghcr.io/verano-20/stage-zero:deployment
    env_file:
      - .env.docker.deployment
    depends_on:
      db:
        condition: service_healthy
    command: [ "./migrate", "up" ]
    restart: "no"

  app:
    image: ghcr.io/verano-20/stage-zero:deployment
    ports:
      - "8080:8080"
    env_file:
      - .env.docker.deployment
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    restart: unless-stopped
    labels:
      logging: "promtail"
      service: "stage-zero-api"

  db:
    image: postgres:16-alpine
    env_file:
      - .env.docker.deployment
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      logging: "promtail"
      service: "stage-zero-db"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.111.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "8889:8889" # Prometheus metrics endpoint
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-deployment}
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.54.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090" # Prometheus web UI
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - otel-collector
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.6.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    depends_on:
      - otel-collector
    restart: unless-stopped

  loki:
    image: grafana/loki:3.2.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    restart: unless-stopped
    labels:
      logging: "promtail"
      service: "loki"

  promtail:
    image: grafana/promtail:3.2.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.0
    ports:
      - "3000:3000" # Grafana web UI
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_METRICS_ENABLED=true
      - GF_METRICS_INTERVAL_SECONDS=5
    depends_on:
      - prometheus
      - tempo
      - loki
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  tempo_data:
  loki_data:
