definitions:
  model.SimpleForm:
    properties:
      name:
        example: My Simple
        maxLength: 255
        type: string
    required:
    - name
    type: object
  model.UserDTO:
    properties:
      created_at:
        example: "2025-01-01T00:00:00Z"
        type: string
      email:
        example: user1@example.com
        type: string
      id:
        example: 1
        type: integer
      updated_at:
        example: "2025-01-01T00:00:00Z"
        type: string
    type: object
  model.UserForm:
    properties:
      email:
        example: user1@example.com
        type: string
      password:
        example: securePassword123
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  response.ApiResponse:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
    type: object
  response.ErrorResponse:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      error:
        example: An error occurred
        type: string
    type: object
info:
  contact: {}
  description: This is a CRUD API base application.
  title: Stage-Zero API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password credentials. Returns
        a JWT token upon successful authentication that can be used for subsequent
        API calls.
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserForm'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful, returns JWT token
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "400":
          description: Invalid request format or validation failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during authentication
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user and generate JWT token
      tags:
      - Authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with email and password. The email must be unique.
        The password must be at least 8 characters long.
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserForm'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/model.UserDTO'
        "400":
          description: Invalid request format or validation failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during user creation
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Sign up a new user
      tags:
      - Authentication
  /health:
    get:
      description: Get health of the server
      produces:
      - application/json
      responses:
        "200":
          description: Server is healthy and operational
          schema:
            $ref: '#/definitions/response.ApiResponse'
      summary: Get health
      tags:
      - Health
  /simple:
    get:
      description: Get all Simples. Returns an array of Simple objects. Returns an
        empty array if none exist.
      produces:
      - application/json
      responses:
        "200":
          description: Simples retrieved successfully
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "500":
          description: Internal server error while retrieving Simples
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all Simples
      tags:
      - Simple
    post:
      consumes:
      - application/json
      description: Create a new Simple with the provided details. The name field is
        required and must be a non-empty string.
      parameters:
      - description: Simple details
        in: body
        name: simple
        required: true
        schema:
          $ref: '#/definitions/model.SimpleForm'
      produces:
      - application/json
      responses:
        "201":
          description: Simple created successfully
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during resource creation
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new Simple
      tags:
      - Simple
  /simple/{id}:
    delete:
      description: Permanently delete a Simple identified by its ID. This operation
        cannot be undone.
      parameters:
      - description: Simple ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Simple deleted successfully
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "400":
          description: Invalid ID format or value
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Simple not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during deletion
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a Simple
      tags:
      - Simple
    get:
      description: Find a Simple by its unique ID
      parameters:
      - description: Simple ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Simple retrieved successfully
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "400":
          description: Invalid ID format or value
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Simple not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Simple by ID
      tags:
      - Simple
    put:
      consumes:
      - application/json
      description: Update a Simple identified by its ID with new data. The ID must
        exist and the request body must contain valid data.
      parameters:
      - description: Simple ID to update
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Simple details
        in: body
        name: simple
        required: true
        schema:
          $ref: '#/definitions/model.SimpleForm'
      produces:
      - application/json
      responses:
        "200":
          description: Simple updated successfully
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "400":
          description: Invalid ID or request body format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Simple not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during update operation
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing Simple
      tags:
      - Simple
swagger: "2.0"
